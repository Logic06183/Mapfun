# Add these packages near the top of your script
if (!require("rnaturalearth")) {
  message("Installing rnaturalearth package for simple basemaps...")
  install.packages("rnaturalearth")
  library(rnaturalearth)
}
if (!require("rnaturalearthdata")) {
  message("Installing rnaturalearthdata package...")
  install.packages("rnaturalearthdata")
  library(rnaturalearthdata)
}
if (!require("rnaturalearthhires")) {
  message("Installing high-resolution natural earth data...")
  install.packages("rnaturalearthhires", repos = "https://ropensci.r-universe.dev", type = "source")
}

# Create urban map function (no OpenStreetMap dependency)
create_urban_map <- function(city_name, bbox, border_color) {
  message(paste("Creating", city_name, "detailed map..."))
  
  # Filter institutions for this city
  city_name_parts <- unlist(strsplit(city_name, " & "))
  
  # More flexible city matching
  city_matches <- sapply(city_name_parts, function(x) {
    grepl(x, base_data$City, ignore.case = TRUE)
  })
  
  if(is.null(dim(city_matches))) {
    # Handle case with only one institution
    city_sf <- base_sf[city_matches, ]
  } else {
    city_sf <- base_sf[rowSums(city_matches) > 0, ]
  }
  
  if(nrow(city_sf) == 0) {
    message(paste("Warning: No institutions found in", city_name, ". Using default bounding box."))
    # We'll still create a map, just without points
  }
  
  # Define bounding box
  xmin <- bbox[1]
  xmax <- bbox[3]
  ymin <- bbox[2]
  ymax <- bbox[4]
  
  # Get simple basemap layers
  # Using naturalearth data which comes with the package (no download needed)
  countries <- ne_countries(scale = "medium", returnclass = "sf")
  coastline <- ne_coastline(scale = "medium", returnclass = "sf")
  cities <- ne_cities(scale = "medium", returnclass = "sf")
  
  # Try to get rivers and lakes, but have fallbacks if they fail
  tryCatch({
    rivers <- ne_download(scale = "medium", type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
  }, error = function(e) {
    message("Could not download rivers data, using simplified version...")
    rivers <- NULL
  })
  
  tryCatch({
    lakes <- ne_download(scale = "medium", type = "lakes", category = "physical", returnclass = "sf")
  }, error = function(e) {
    message("Could not download lakes data, using simplified version...")
    lakes <- NULL
  })
  
  # Filter cities that fall within our bounding box with some buffer
  buffer <- 0.1
  cities_in_view <- cities[cities$longitude > (xmin - buffer) & 
                             cities$longitude < (xmax + buffer) &
                             cities$latitude > (ymin - buffer) & 
                             cities$latitude < (ymax + buffer), ]
  
  # Adjust display based on city
  cape_town <- grepl("cape town", tolower(city_name))
  gauteng <- grepl("gauteng", tolower(city_name))
  
  # Create the map with the simple base layers
  p <- ggplot() +
    # Base country layer
    geom_sf(data = countries, fill = "antiquewhite1", color = "gray80", size = 0.2)
  
  # Add water features if available
  if (!is.null(lakes)) {
    p <- p + geom_sf(data = lakes, fill = "aliceblue", color = "steelblue", size = 0.2)
  }
  if (!is.null(rivers)) {
    p <- p + geom_sf(data = rivers, color = "steelblue", size = 0.2)
  }
  
  # Continue with the map
  p <- p +
    # Add coastline
    geom_sf(data = coastline, color = "steelblue", size = 0.3) +
    # Add the nearest cities (but not if they will clutter the map)
    geom_sf(data = cities_in_view[cities_in_view$pop_max > 100000, ], 
            color = "gray30", size = 0.8, alpha = 0.7) +
    # Add the data points
    geom_sf(data = city_sf, aes(color = institution_type, size = focus_areas),
            alpha = 0.8) +
    # Add the bounding box
    geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
              fill = NA, color = border_color, size = 1.5) +
    # Scales and legends
    scale_size_continuous(range = c(3, 5), name = "Number of\nFocus Areas") +
    scale_color_manual(values = c("Official Partner" = "#2c7fb8", 
                                  "Data Provider" = "#7fcdbb",
                                  "Other" = "#edf8b1"),
                       name = "Institution Type") +
    # Map elements
    annotation_scale(location = "bl", width_hint = 0.25) +
    annotation_north_arrow(
      location = "tr", which_north = "true",
      pad_x = unit(0.1, "in"), pad_y = unit(0.1, "in"),
      style = north_arrow_fancy_orienteering
    ) +
    # Set the view
    coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +
    # Theming
    theme_minimal() +
    theme(
      text = element_text(family = main_font),
      plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
      panel.grid.major = element_line(color = "gray90", size = 0.2),
      panel.grid.minor = element_line(color = "gray95", size = 0.1),
      legend.position = "bottom",
      legend.box = "vertical"
    ) +
    labs(title = paste(city_name, "Climate & Health Institutions"))
  
  # Add other city labels (from Natural Earth)
  if(nrow(cities_in_view) > 0) {
    p <- p + 
      ggrepel::geom_text_repel(
        data = cities_in_view[cities_in_view$pop_max > 500000, ],
        aes(x = longitude, y = latitude, label = name),
        size = 2.5, family = main_font,
        color = "gray30",
        box.padding = 0.5, point.padding = 0.5,
        force = 2, max.overlaps = 10,
        bg.color = "white", bg.r = 0.1,
        segment.size = 0.15,
        min.segment.length = 0,
        seed = 42
      )
  }
  
  # Add institution labels
  if(nrow(city_sf) > 0) {
    p <- p + 
      ggrepel::geom_text_repel(
        data = city_sf,
        aes(label = Institution, geometry = geometry),
        stat = "sf_coordinates",
        size = 3, family = main_font,
        box.padding = 0.7, point.padding = 0.5,
        force = 4, max.overlaps = 20,
        bg.color = "white", bg.r = 0.1,
        segment.size = 0.2,
        min.segment.length = 0,
        seed = 42
      )
  }
  
  # Special customizations for specific cities
  if(cape_town) {
    # Enhance Cape Town map with specific details if needed
    message("Applying Cape Town-specific map enhancements...")
    # Add Cape Town specific features if needed
  }
  
  if(gauteng) {
    # Enhance Gauteng map with specific details if needed
    message("Applying Gauteng-specific map enhancements...")
    # Add Gauteng specific features if needed
  }
  
  return(p)
}