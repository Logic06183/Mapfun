# Southern Africa Map with Focus Areas and High-Quality Urban Insets
# Load required libraries
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(dplyr)
library(readr)
library(ggspatial) # For scale bar and north arrow
library(cowplot)   # For layout
library(ggrepel)   # For non-overlapping labels
library(leaflet)   # For high-quality basemaps
library(mapview)   # For static map exports
library(htmlwidgets) # For saving leaflet maps
library(webshot2)    # For converting to PNG
library(ggmap)       # For static maps with basemaps

# Path handling
data_path <- file.path("C:", "Users", "CraigParker", "OneDrive - Wits PHR", "Desktop", "Wellcome_climate_center", "base.csv")

# Read the data with error handling
tryCatch({
  base_data <- read.csv(data_path, sep = ";", stringsAsFactors = FALSE)
  cat("Successfully read data from:", data_path, "\n")
}, error = function(e) {
  cat("Error reading file at specified path. Please check file path or provide the file path when running the script.\n")
  stop(e)
})

# Define Southern African countries
southern_africa_countries <- c(
  "South Africa", "Namibia", "Botswana", "Zimbabwe", "Mozambique", 
  "Lesotho", "Eswatini", "Zambia", "Malawi", "Angola"
)

# Filter data for Southern Africa
southern_africa_data <- base_data %>%
  filter(Country %in% southern_africa_countries)

# Create a new column for focus area type (for coloring)
# Using more efficient case_when for focus type assignment
southern_africa_data$FocusType <- case_when(
  southern_africa_data$Research == 1 ~ "Research",
  southern_africa_data$Policy == 1 ~ "Policy",
  southern_africa_data$`Engagement, Advocacy, and Capacity Building` == 1 ~ "Engagement, Advocacy and Capacity Building",
  southern_africa_data$Finance_programmes == 1 ~ "Finance and Programmes",
  TRUE ~ NA_character_
)

# Remove rows with NA focus type
southern_africa_data <- southern_africa_data %>%
  filter(!is.na(FocusType))

# Create shape column for Data Providers
southern_africa_data$Shape <- ifelse(southern_africa_data$Data_Providers == 1, 17, 16)

# Identify major partners
southern_africa_data <- southern_africa_data %>%
  mutate(
    focus_count = Research + Policy + `Engagement, Advocacy, and Capacity Building` + Finance_programmes,
    is_major_partner = `Official Partners` == 1 & (focus_count > 1 | Data_Providers == 1),
    label_text = ifelse(is_major_partner, Short_Name, NA)
  )

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Filter for Africa for context
africa <- world %>%
  filter(continent == "Africa")

# Define the color palette based on your specifications
color_palette <- c(
  "Research" = "#0F1F2C",
  "Finance and Programmes" = "#90876E",
  "Engagement, Advocacy and Capacity Building" = "#1E4611",
  "Policy" = "#CD1A1B"
)

# Create a standardized theme for all maps
map_theme <- function() {
  theme_minimal() +
    theme(
      text = element_text(family = "sans"),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)),
      plot.caption = element_text(size = 9, hjust = 0, margin = margin(t = 10)),
      legend.position = "bottom",
      legend.title = element_text(size = 10, face = "bold"),
      legend.text = element_text(size = 9),
      legend.key.size = unit(0.8, "lines"),
      panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = "aliceblue", color = NA),
      plot.background = element_rect(fill = "white", color = NA),
      axis.title = element_blank(),
      axis.text = element_text(size = 8)
    )
}

# Function to create main map
create_main_map <- function(include_boxes = FALSE) {
  p <- ggplot() +
    # Base map layer with improved styling
    geom_sf(data = africa, fill = "white", color = "gray80", size = 0.3) +
    
    # Points with focus area colors and shapes for data providers
    geom_point(
      data = southern_africa_data,
      aes(x = lon, y = lat, color = FocusType, shape = factor(Shape)),
      size = 3,
      alpha = 0.9
    ) +
    
    # Add labels for major partners with non-overlapping positioning
    geom_text_repel(
      data = southern_africa_data %>% filter(is_major_partner),
      aes(x = lon, y = lat, label = label_text),
      size = 2.5,
      fontface = "bold",
      color = "black",
      bg.color = "white",
      bg.r = 0.15,
      segment.color = "gray50",
      segment.size = 0.2,
      min.segment.length = 0,
      max.overlaps = 20,
      box.padding = 0.5,
      point.padding = 0.2
    ) +
    
    # Apply the specified color palette
    scale_color_manual(
      values = color_palette,
      name = "Focus Area"
    ) +
    
    # Define shapes with clear labels
    scale_shape_manual(
      values = c("16" = 16, "17" = 17),
      name = "Type",
      labels = c("Regular Institution", "Data Provider")
    ) +
    
    # Set map boundaries for Southern Africa
    coord_sf(
      xlim = c(10, 40),
      ylim = c(-35, 0),
      expand = FALSE
    ) +
    
    # Add scale bar and north arrow
    annotation_scale(
      location = "bl",
      width_hint = 0.4,
      style = "ticks",
      pad_x = unit(0.4, "cm"),
      pad_y = unit(0.4, "cm")
    ) +
    annotation_north_arrow(
      location = "tr",
      which_north = "true",
      style = north_arrow_minimal(),
      height = unit(1, "cm"),
      width = unit(1, "cm")
    ) +
    
    # Add informative labels
    labs(
      title = "Climate & Health Initiatives in Southern Africa",
      subtitle = "Distribution of institutions by focus area and data provider status",
      caption = "Source: Wellcome Climate Center"
    ) +
    
    # Apply the standardized theme
    map_theme()
  
  # Add bounding boxes if requested
  if (include_boxes) {
    # Define bounding boxes for the urban insets
    jhb_tshwane_bbox <- c(
      xmin = 27.8, xmax = 28.4,  # longitude
      ymin = -26.3, ymax = -25.6 # latitude
    )
    
    cape_town_bbox <- c(
      xmin = 18.3, xmax = 18.7,  # longitude
      ymin = -34.2, ymax = -33.7 # latitude
    )
    
    p <- p +
      # Add Johannesburg/Tshwane bounding box
      geom_rect(
        aes(
          xmin = jhb_tshwane_bbox[1], xmax = jhb_tshwane_bbox[2],
          ymin = jhb_tshwane_bbox[3], ymax = jhb_tshwane_bbox[4]
        ),
        fill = NA, color = "#0F1F2C", linewidth = 0.8, linetype = "solid"
      ) +
      # Add Cape Town bounding box
      geom_rect(
        aes(
          xmin = cape_town_bbox[1], xmax = cape_town_bbox[2],
          ymin = cape_town_bbox[3], ymax = cape_town_bbox[4]
        ),
        fill = NA, color = "#CD1A1B", linewidth = 0.8, linetype = "solid"
      ) +
      # Add labels for the inset areas
      annotate("text", 
               x = jhb_tshwane_bbox[1] - 0.5, 
               y = jhb_tshwane_bbox[3] - 0.2, 
               label = "Johannesburg/\nTshwane", 
               fontface = "bold", 
               hjust = 0,
               color = "#0F1F2C") +
      annotate("text", 
               x = cape_town_bbox[1] - 0.5, 
               y = cape_town_bbox[3] - 0.2, 
               label = "Cape Town", 
               fontface = "bold", 
               hjust = 0,
               color = "#CD1A1B")
  }
  
  return(p)
}

# Create and save the main map
cat("Creating main map...\n")
main_map <- create_main_map(include_boxes = FALSE)
ggsave("southern_africa_map.png", main_map, width = 10, height = 8, dpi = 600, bg = "white")

# Create and save the main map with boxes
cat("Creating main map with inset boxes...\n")
main_map_with_boxes <- create_main_map(include_boxes = TRUE)
ggsave("southern_africa_map_with_boxes.png", main_map_with_boxes, width = 10, height = 8, dpi = 600, bg = "white")

# Create leaflet maps for urban insets (with nice basemaps)
create_leaflet_inset <- function(bbox, area_name) {
  cat(paste("Creating", area_name, "leaflet map...\n"))
  
  # Extract coordinates
  xmin <- bbox[1]
  xmax <- bbox[2]
  ymin <- bbox[3]
  ymax <- bbox[4]
  
  # Filter data for this area
  area_data <- southern_africa_data %>%
    filter(lon >= xmin & lon <= xmax & lat >= ymin & lat <= ymax)
  
  # Create icon sets for different focus types
  icon_sets <- lapply(unique(area_data$FocusType), function(focus_type) {
    color <- color_palette[focus_type]
    
    # Create different icons based on Shape
    circle_data <- area_data %>% filter(FocusType == focus_type & Shape == 16)
    triangle_data <- area_data %>% filter(FocusType == focus_type & Shape == 17)
    
    # Create icon set for this focus type
    list(
      focus_type = focus_type,
      circle_icon = makeAwesomeIcon(
        icon = "circle", 
        library = "fa", 
        markerColor = "white", 
        iconColor = color
      ),
      triangle_icon = makeAwesomeIcon(
        icon = "location-arrow", 
        library = "fa", 
        markerColor = "white", 
        iconColor = color
      ),
      circle_data = circle_data,
      triangle_data = triangle_data
    )
  })
  
  # Create the leaflet map
  m <- leaflet(options = leafletOptions(zoomControl = TRUE)) %>%
    # Set view to our bounding box
    fitBounds(xmin, ymin, xmax, ymax) %>%
    # Add OpenStreetMap base layer
    addProviderTiles(providers$OpenStreetMap.Mapnik, 
                     options = providerTileOptions(opacity = 0.7)) %>%
    # Add CartoDB Positron as alternative basemap
    addProviderTiles(providers$CartoDB.Positron, 
                     group = "CartoDB Positron",
                     options = providerTileOptions(opacity = 0.7)) %>%
    # Add Esri World Imagery as satellite option
    addProviderTiles(providers$Esri.WorldImagery, 
                     group = "Satellite",
                     options = providerTileOptions(opacity = 0.7))
  
  # Add the different icon types
  for (icon_set in icon_sets) {
    # Add circle markers
    if (nrow(icon_set$circle_data) > 0) {
      m <- m %>% addAwesomeMarkers(
        data = icon_set$circle_data,
        lng = ~lon, lat = ~lat,
        icon = icon_set$circle_icon,
        label = ~Short_Name,
        popup = ~paste("<strong>", Short_Name, "</strong><br>",
                       "Type: Regular Institution<br>",
                       "Focus: ", icon_set$focus_type),
        group = paste0(icon_set$focus_type, " - Regular")
      )
    }
    
    # Add triangle markers
    if (nrow(icon_set$triangle_data) > 0) {
      m <- m %>% addAwesomeMarkers(
        data = icon_set$triangle_data,
        lng = ~lon, lat = ~lat,
        icon = icon_set$triangle_icon,
        label = ~Short_Name,
        popup = ~paste("<strong>", Short_Name, "</strong><br>",
                       "Type: Data Provider<br>",
                       "Focus: ", icon_set$focus_type),
        group = paste0(icon_set$focus_type, " - Data Provider")
      )
    }
  }
  
  # Create layer groups and control
  basemap_groups <- c("OpenStreetMap.Mapnik", "CartoDB Positron", "Satellite")
  overlay_groups <- unlist(lapply(icon_sets, function(x) {
    c(paste0(x$focus_type, " - Regular"), paste0(x$focus_type, " - Data Provider"))
  }))
  
  # Add layers control
  m <- m %>% addLayersControl(
    baseGroups = basemap_groups,
    overlayGroups = overlay_groups,
    options = layersControlOptions(collapsed = FALSE)
  )
  
  # Add title
  m <- m %>% addControl(
    html = paste("<h3>", area_name, "Climate & Health Initiatives</h3>"),
    position = "topright"
  )
  
  # Add scale bar
  m <- m %>% addScaleBar(position = "bottomleft")
  
  return(m)
}

# Create static ggmap insets (alternative approach using Google Maps or Stamen)
create_ggmap_inset <- function(bbox, area_name) {
  cat(paste("Creating", area_name, "ggmap...\n"))
  
  # Extract coordinates
  xmin <- bbox[1]
  xmax <- bbox[2]
  ymin <- bbox[3]
  ymax <- bbox[4]
  
  # Create bbox in format needed for get_stamenmap
  bbox_ggmap <- c(left = xmin, bottom = ymin, right = xmax, top = ymax)
  
  # Get stamen map (watercolor or terrain are good options)
  base_map <- tryCatch({
    get_stamenmap(bbox_ggmap, zoom = 13, maptype = "terrain-background")
  }, error = function(e) {
    cat("Error fetching Stamen map:", e$message, "\n")
    cat("Using basic plot instead\n")
    return(NULL)
  })
  
  # Filter data for this area
  area_data <- southern_africa_data %>%
    filter(lon >= xmin & lon <= xmax & lat >= ymin & lat <= ymax)
  
  # If base_map is NULL, use a basic plot instead
  if (is.null(base_map)) {
    p <- ggplot() +
      # Add a colored background
      geom_rect(
        aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
        fill = "aliceblue", color = NA
      ) +
      # Add a simple grid
      geom_hline(yintercept = seq(floor(ymin*10)/10, ceiling(ymax*10)/10, by = 0.1), 
                 color = "gray90", size = 0.2) +
      geom_vline(xintercept = seq(floor(xmin*10)/10, ceiling(xmax*10)/10, by = 0.1), 
                 color = "gray90", size = 0.2)
  } else {
    # Use the downloaded base map
    p <- ggmap(base_map)
  }
  
  # Add points and other elements
  p <- p +
    # Points with focus area colors and shapes for data providers
    geom_point(
      data = area_data,
      aes(x = lon, y = lat, color = FocusType, shape = factor(Shape)),
      size = 4,
      alpha = 0.9
    ) +
    
    # Add labels for all partners in this area
    geom_text_repel(
      data = area_data,
      aes(x = lon, y = lat, label = Short_Name),
      size = 3,
      fontface = "bold",
      color = "black",
      bg.color = "white",
      bg.r = 0.15,
      segment.color = "gray50",
      segment.size = 0.2,
      min.segment.length = 0,
      max.overlaps = 30,
      box.padding = 0.5,
      point.padding = 0.2
    ) +
    
    # Apply the specified color palette
    scale_color_manual(
      values = color_palette,
      name = "Focus Area"
    ) +
    
    # Define shapes with clear labels
    scale_shape_manual(
      values = c("16" = 16, "17" = 17),
      name = "Type",
      labels = c("Regular Institution", "Data Provider")
    ) +
    
    # Set map boundaries
    coord_fixed(
      xlim = c(xmin, xmax),
      ylim = c(ymin, ymax),
      expand = FALSE
    ) +
    
    # Add scale bar
    annotation_scale(
      location = "bl",
      width_hint = 0.3,
      style = "ticks",
      pad_x = unit(0.4, "cm"),
      pad_y = unit(0.4, "cm")
    ) +
    
    # Add north arrow
    annotation_north_arrow(
      location = "tr",
      which_north = "true",
      style = north_arrow_minimal(),
      height = unit(1.2, "cm"),
      width = unit(1.2, "cm")
    ) +
    
    # Add informative labels
    labs(
      title = paste(area_name, "Climate & Health Initiatives"),
      subtitle = "Detailed view of institutional partners",
      caption = "Base map: © OpenStreetMap contributors | Source: Wellcome Climate Center"
    ) +
    
    # Apply theme
    theme_minimal() +
    theme(
      text = element_text(family = "sans"),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)),
      plot.caption = element_text(size = 9, hjust = 0, margin = margin(t = 10)),
      legend.position = "bottom",
      legend.title = element_text(size = 10, face = "bold"),
      legend.text = element_text(size = 9),
      legend.key.size = unit(0.8, "lines"),
      panel.grid = element_blank(),
      axis.text = element_text(size = 8, color = "gray40")
    )
  
  return(p)
}

# Define the bounding boxes
jhb_tshwane_bbox <- c(
  xmin = 27.8, xmax = 28.4,  # longitude
  ymin = -26.3, ymax = -25.6 # latitude
)

cape_town_bbox <- c(
  xmin = 18.3, xmax = 18.7,  # longitude
  ymin = -34.2, ymax = -33.7 # latitude
)

# Create both leaflet and ggmap inset maps
# First, try leaflet maps
jhb_leaflet <- tryCatch({
  create_leaflet_inset(jhb_tshwane_bbox, "Johannesburg & Tshwane")
}, error = function(e) {
  cat("Error creating leaflet map:", e$message, "\n")
  return(NULL)
})

cape_leaflet <- tryCatch({
  create_leaflet_inset(cape_town_bbox, "Cape Town")
}, error = function(e) {
  cat("Error creating leaflet map:", e$message, "\n")
  return(NULL)
})

# Save leaflet maps as HTML
if (!is.null(jhb_leaflet)) {
  htmlwidgets::saveWidget(jhb_leaflet, "johannesburg_tshwane_map.html", selfcontained = TRUE)
  cat("Saved Johannesburg & Tshwane leaflet map as HTML\n")
}

if (!is.null(cape_leaflet)) {
  htmlwidgets::saveWidget(cape_leaflet, "cape_town_map.html", selfcontained = TRUE)
  cat("Saved Cape Town leaflet map as HTML\n")
}

# Try to convert to PNG if webshot2 is available
if (requireNamespace("webshot2", quietly = TRUE)) {
  tryCatch({
    webshot2::webshot("johannesburg_tshwane_map.html", "johannesburg_tshwane_map.png", 
                      vwidth = 800, vheight = 700, delay = 0.5)
    webshot2::webshot("cape_town_map.html", "cape_town_map.png", 
                      vwidth = 800, vheight = 700, delay = 0.5)
    cat("Converted leaflet maps to PNG\n")
  }, error = function(e) {
    cat("Error converting leaflet to PNG:", e$message, "\n")
  })
}

# Create ggmap versions as a backup
jhb_ggmap <- create_ggmap_inset(jhb_tshwane_bbox, "Johannesburg & Tshwane")
cape_ggmap <- create_ggmap_inset(cape_town_bbox, "Cape Town")

# Save ggmap insets
ggsave("johannesburg_tshwane_ggmap.png", jhb_ggmap, width = 8, height = 7, dpi = 600, bg = "white")
ggsave("cape_town_ggmap.png", cape_ggmap, width = 8, height = 7, dpi = 600, bg = "white")

# Save as PDF if possible
tryCatch({
  ggsave("johannesburg_tshwane_ggmap.pdf", jhb_ggmap, width = 8, height = 7, device = cairo_pdf, dpi = 300)
  ggsave("cape_town_ggmap.pdf", cape_ggmap, width = 8, height = 7, device = cairo_pdf, dpi = 300)
  cat("Saved ggmap insets as PDF\n")
}, error = function(e) {
  cat("Error saving PDFs:", e$message, "\n")
})

# Create combined layout with ggmap insets
combined_map <- plot_grid(
  main_map_with_boxes,
  plot_grid(jhb_ggmap, cape_ggmap, ncol = 2),
  nrow = 2,
  rel_heights = c(1.2, 1),
  labels = c("A", "B"),
  label_size = 18
)

# Add title to the combined map
combined_map_titled <- ggdraw() +
  draw_plot(combined_map) +
  draw_label(
    "Climate & Health Initiatives in Southern Africa",
    x = 0.5, y = 0.98,
    size = 18, fontface = "bold"
  ) +
  draw_label(
    "Regional Overview and Urban Focus Areas",
    x = 0.5, y = 0.95,
    size = 14
  ) +
  draw_label(
    "Source: Wellcome Climate Center | Base maps: © OpenStreetMap contributors",
    x = 0.5, y = 0.02,
    size = 10
  )

# Save the combined layout
ggsave("southern_africa_climate_health_complete.png",
       combined_map_titled,
       width = 15,
       height = 18,
       dpi = 600,
       bg = "white")

# Create a dashboard-style layout with insets
dashboard <- ggdraw() +
  draw_plot(main_map, 0, 0, 1, 1) +
  draw_plot(jhb_ggmap, 0.55, 0.07, 0.43, 0.35) +
  draw_plot(cape_ggmap, 0.02, 0.07, 0.43, 0.35) +
  draw_label(
    "Climate & Health Initiatives in Southern Africa",
    x = 0.5, y = 0.98,
    size = 18, fontface = "bold"
  ) +
  draw_label(
    "Regional Overview with Urban Detail Insets",
    x = 0.5, y = 0.95,
    size = 14
  )

# Save the dashboard layout
ggsave("southern_africa_dashboard.png",
       dashboard,
       width = 16,
       height = 12,
       dpi = 600,
       bg = "white")

cat("\nScript completed successfully! Files have been saved to your working directory.\n")

# Installation instructions for missing packages
cat("\nIf you're missing any packages, run this code to install them:\n")
cat('install.packages(c("sf", "rnaturalearth", "rnaturalearthdata", "ggplot2", "dplyr", "readr", "ggspatial", "cowplot", "ggrepel", "leaflet", "mapview", "htmlwidgets", "webshot2", "ggmap"))\n')